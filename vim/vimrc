set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8
set nocompatible
set termguicolors
set ttyfast
set background=dark

set autoindent smartindent
set autoread
set backspace=indent,eol,start
set belloff=all
set cmdheight=1
set complete-=i
set completeopt=noselect,noinsert,menuone
set cursorline
set display+=lastline
set expandtab smarttab
set fillchars=vert:│,fold:·
set formatoptions+=j
set hidden
set history=10000
set hlsearch incsearch
set ignorecase smartcase
set laststatus=2
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set mouse=a ttymouse=xterm2
set nobackup nowritebackup noswapfile
set noshowcmd noshowmode
set nostartofline
set nrformats-=octal
set previewheight=4
set scrolloff=1
set sessionoptions-=options
set shortmess=aIc
set splitbelow splitright
set tabstop=4 shiftwidth=0 softtabstop=-1
set ttimeout ttimeoutlen=25
set viewoptions-=options
set viminfo^=!
set wildmenu

filetype plugin indent on
syntax enable

call plug#begin()
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'ntpeters/vim-better-whitespace'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'dense-analysis/ale'
Plug 'georgewitteman/vim-fish'
Plug 'ocaml/vim-ocaml'
Plug 'plasticboy/vim-markdown'
call plug#end()

let g:maplocalleader = ','

" Disable arrow keys for movement
inoremap <Up>    <Nop>
inoremap <Down>  <Nop>
inoremap <Left>  <Nop>
inoremap <Right> <Nop>
noremap  <Up>    <Nop>
noremap  <Down>  <Nop>

noremap <silent> <Left>  :bp<CR>
noremap <silent> <Right> :bn<CR>

nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>f :Files<CR>
nnoremap <silent> <Leader>m :Marks<CR>
nnoremap <silent> <Leader>l :Lines<CR>
nnoremap <silent> <Leader>w :Windows<CR>
nnoremap <silent> <Leader>q :pclose <bar> cclose <bar> lclose<CR>

nnoremap <silent> <C-H> <C-W>h
nnoremap <silent> <C-J> <C-W>j
nnoremap <silent> <C-K> <C-W>k
nnoremap <silent> <C-L> <C-W>l

let g:html_indent_autotags = "html"

" ---- gruvbox ----
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_sign_column = 'dark0'
colorscheme gruvbox

" ---- fzf ----
let g:fzf_layout = { 'down': '~25%' }

" ---- vim-better-whitespace
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0

" ---- airline ----
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#ale#enabled = 1

" ---- ALE ----
let g:ale_hover_to_preview = 1
let g:ale_sign_column_always = 1
let g:ale_linters_explicit = 1
let g:ale_fix_on_save = 1
let g:ale_completion_max_suggestions = 999
let g:ale_linters = {
\  'fish': ['fish'],
\  'go': ['gopls-custom'],
\  'ocaml': ['ocamllsp'],
\  'sh': ['shellcheck'],
\}
let g:ale_fixers = {
\  'go': ['goimports'],
\  'ocaml': ['ocamlformat'],
\}

" ---- vim-markdown ----
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_fenced_languages = [
\  'go=go',
\  'ocaml=ocaml',
\  'viml=vim',
\  'bash=sh',
\  'fish=fish'
\]

augroup rlb_global
  autocmd!
  autocmd FileType help noremap <buffer><silent> <Leader>q :q<CR>
  autocmd FileType ocaml,vim,javascript,json,html setlocal tabstop=2
  autocmd FileType go,ocaml call s:LSPSetup()
  autocmd FileType fish,go,ocaml,sh setlocal signcolumn=yes
augroup END

function! s:LSPSetup() abort
  setlocal omnifunc=ale#completion#OmniFunc
  nmap <buffer><silent> K  <Plug>(ale_hover)
  nmap <buffer><silent> gd <Plug>(ale_go_to_definition)
  nmap <buffer><silent> gr <Plug>(ale_find_references)
endfunction

function! s:FindOCamlProjectRoot(buffer) abort
  let l:dune_project = ale#path#FindNearestFile(a:buffer, 'dune-project')
  if !empty(l:dune_project)
    return fnamemodify(l:dune_project, ':h')
  endif

  let l:dune_file = ale#path#FindNearestFile(a:buffer, 'dune')
  if !empty(l:dune_file)
    return fnamemodify(l:dune_file, ':h')
  endif

  let l:buffer_file = fnamemodify(bufname(a:buffer), ':p')
  return fnameescape(l:buffer_file)
endfunction

call ale#linter#Define('ocaml', {
\  'name': 'ocamllsp',
\  'lsp': 'stdio',
\  'executable': 'ocamllsp',
\  'command': 'ocamllsp',
\  'project_root': function('s:FindOCamlProjectRoot'),
\})

call ale#linter#Define('go', {
\  'name': 'gopls-custom',
\  'lsp': 'stdio',
\  'initialization_options': { 'staticcheck': v:true, },
\  'executable': {b -> ale#Var(b, 'go_gopls_executable')},
\  'command': function('ale_linters#go#gopls#GetCommand'),
\  'project_root': function('ale_linters#go#gopls#FindProjectRoot'),
\})
